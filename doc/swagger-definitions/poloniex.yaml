openapi: 3.0.0
info:
  description: API DOCUMENTATION
  version: 1.0.0
  title: Poloniex API
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: ' https://poloniex.com'
tags:
  - name: Public
    description: 'Please note that making more than 6 calls per second to the public API, or repeatedly and needlessly fetching excessive amounts of data, can result in your IP being banned.'
  - name: Trading
    description: For programmatic trading of crypto currencies
paths:
  /public:
    get:
      tags:
        - Public
      summary: returnTicker
      operationId: getMarkets
      description: |
        Used to get the open and available trading markets at Bittrex along with other meta data.
      parameters:
        - $ref: '#/components/parameters/command'
        - $ref: '#/components/parameters/currencyPair'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/end'
        - $ref: '#/components/parameters/depth'
        - $ref: '#/components/parameters/period'
        - $ref: '#/components/parameters/currency'
      responses:
        '200':
          description: One of the multipler response schema
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/tickerResult'
                  - $ref: '#/components/schemas/24VolumeResult'
                  - $ref: '#/components/schemas/orderBookResult'
                  - $ref: '#/components/schemas/tradeHistoryResult'
                  - $ref: '#/components/schemas/chartDataResult'
                  - $ref: '#/components/schemas/currenciesResult'
                  - $ref: '#/components/schemas/loanOrdersResult'
components:
  schemas:
    24Volume:
      type: object
      additionalProperties:
        type: number
        format: double
    24VolumeResult:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/24Volume'
    chartData:
      type: object
      properties:
        date:
          type: integer
          description: unix time stamp
          example: 1405699200
        high:
          type: number
          format: double
          example: 0.00007995
        low:
          type: number
          format: double
          example: 0.00007417
        open:
          type: number
          format: double
          example: 0.00007468
        close:
          type: number
          format: double
          example: 0.0000752
        volume:
          type: number
          format: double
          example: 0.44918113
        quoteVolume:
          type: number
          format: double
          example: 5884.91562797
        weightedAverage:
          type: number
          format: double
          example: 0.00007632
      required:
        - date
        - high
        - low
        - open
        - close
        - volume
        - quoteVolume
        - weightedAverage
    chartDataResult:
      type: array
      items:
        $ref: '#/components/schemas/chartData'
    currency:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 1CRedit
        txFee:
          type: number
          format: double
          example: 0.01000000
        minConf:
          type: integer
          example: 3
        depositAddress:
          type: string
        disabled:
          type: integer
          enum:
            - 0
            - 1
          example: 0
        delisted:
          type: integer
          enum:
            - 0
            - 1
          example: 0
        frozen:
          type: integer
          enum:
            - 0
            - 1
          example: 0
      required:
        - id
        - name
        - txFee
        - minConf
        - disabled
        - delisted
        - frozen
    currenciesResult:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/currency'
    loan:
      type: object
      properties:
        rate:
          type: number
          format: double
          example: 0.00009439
        amount:
          type: number
          format: double
          example: 68.21714101
        rangeMin:
          type: integer
          example: 2
        rangeMax:
          type: integer
          example: 2
      required:
        - rate
        - amount
        - rangeMin
        - rangeMax
    loanOrdersResult:
      type: object
      properties:
        offers:
          type: array
          items:
            $ref: '#/components/schemas/loan'
        demands:
          type: array
          items:
            $ref: '#/components/schemas/loan'
    market:
      type: object
      properties:
        id:
          type: integer
          example: 7
        last:
          type: number
          format: double
          example: 0.00007451
        lowestAsk:
          type: number
          format: double
          example: 0.00007451
        highestBid:
          type: number
          format: double
          example: 0.00007451
        percentChange:
          type: number
          format: double
          example: -0.04761904
        baseVolume:
          type: number
          format: double
          example: 68.18903938
        quoteVolume:
          type: number
          format: double
          example: 83845318.41376261
        isFrozen:
          type: integer
          enum:
            - 0
            - 1
          example: 0
        high24hr:
          type: number
          format: double
          example: 8.5e-7
        low24hr:
          type: number
          format: double
          example: 7.9e-7
      required:
        - id
        - last
        - lowestAsk
        - highestBid
        - percentChange
        - baseVolume
        - quoteVolume
        - isFrozen
        - high24hr
        - low24hr
    orderBookResult:
      type: object
      properties:
        ask:
          type: array
          items:
            type: number
            format: float
        bid:
          type: array
          items:
            type: number
            format: float
        isFrozen:
          type: integer
          enum:
            - 0
            - 1
          example: 0
        seq:
          type: integer
    tickerResult:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/market'
    trade:
      type: object
      properties:
        globalTradeID:
          type: integer
          example: 2036467
        tradeID:
          type: integer
          example: 21387
        date:
          type: string
          format: date-time
          example: 2014-09-12T05:21:26.000Z
        type:
          type: string
          enum:
            - buy
            - sell
        rate:
          type: number
          format: double
          example: 0.00008943
        amount:
          type: number
          format: double
          example: 1.2724118
        total:
          type: number
          format: double
          example: 0.00011379
      required:
        - globalTradeID
        - tradeID
        - date
        - type
        - rate
        - amount
        - total
    tradeHistoryResult:
      type: array
      items:
        $ref: '#/components/schemas/trade'
  parameters:
    command:
      name: command
      in: query
      required: true
      schema:
        type: string
        enum:
          - returnTicker
          - return24hVolume
          - returnOrderBook
          - returnTradeHistory
          - returnChartData
          - returnCurrencies
          - returnLoanOrders
    currency:
      name: currency
      description: a given currency (returnLoanOrders)
      in: query
      schema:
        type: string
        example: BTC
    currencyPair:
      name: currencyPair
      in: query
      schema:
        type: string
        example: BTC_NXT
    depth:
      name: depth
      in: query
      description: 'depth of the order book (returnOrderBook, returnTradeHistory, returnChartData)'
      schema:
        type: integer
        example: 10
    start:
      name: start
      in: query
      description: 'The start date as unix millisecond timestamp (returnTradeHistory, returnChartData)'
      schema:
        type: integer
        format: int64
        example: 1410158341
    end:
      name: end
      in: query
      description: 'The end date as unix millisecond timestamp (returnTradeHistory, returnChartData)'
      schema:
        type: integer
        format: int64
        example: 1410158341
    period:
      name: period
      in: query
      description: candlestick period in seconds; valid values (returnChartData)
      schema:
        type: integer
        enum:
          - 300
          - 900
          - 1800
          - 7200
          - 14400
          - 86400
