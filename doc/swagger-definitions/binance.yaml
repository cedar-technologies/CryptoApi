openapi: 3.0.0
info:
  description: |
    [binance documentation on github](https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md)
  version: 1.0.0
  title: Binance API
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://api.binance.com'
tags:
  - name: General endpoints
  - name: Market Data endpoints
paths:
  /api/v1/ping:
    get:
      tags:
        - General endpoints
      summary: Test connectivity to the Rest API.
      operationId: TestConnectivity
      responses:
        '200':
          description: ping response
        '418':
          $ref: '#/components/responses/ipBanned'
        '429':
          $ref: '#/components/responses/rateLimit'
        '504':
          $ref: '#/components/responses/timeout'
        4XX:
          $ref: '#/components/responses/malformedRequests'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /api/v1/time:
    get:
      tags:
        - General endpoints
      summary: Test connectivity to the Rest API and get the current server time.
      operationId: CheckServerTime
      responses:
        '200':
          description: ping response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeResponse'
        '418':
          $ref: '#/components/responses/ipBanned'
        '429':
          $ref: '#/components/responses/rateLimit'
        '504':
          $ref: '#/components/responses/timeout'
        4XX:
          $ref: '#/components/responses/malformedRequests'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /api/v1/exchangeInfo:
    get:
      tags:
        - Market Data endpoints
      summary: Current exchange trading rules and symbol information.
      operationId: GetExchangeInformation
      responses:
        '200':
          description: exchange info response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exchangeInformationResponse'
        '418':
          $ref: '#/components/responses/ipBanned'
        '429':
          $ref: '#/components/responses/rateLimit'
        '504':
          $ref: '#/components/responses/timeout'
        4XX:
          $ref: '#/components/responses/malformedRequests'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /api/v1/depth:
    get:
      tags:
        - Public API Endpoints
      summary: Current exchange trading rules and symbol information.
      operationId: GetOrderBook
      parameters:
        - $ref: '#/components/parameters/symbol'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: order book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderBookResponse'
        '418':
          $ref: '#/components/responses/ipBanned'
        '429':
          $ref: '#/components/responses/rateLimit'
        '504':
          $ref: '#/components/responses/timeout'
        4XX:
          $ref: '#/components/responses/malformedRequests'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /api/v1/trades:
    get:
      tags:
        - Public API Endpoints
      summary: Get recent trades (up to last 500).
      operationId: GetRecentTradesList
      parameters:
        - $ref: '#/components/parameters/symbol'
        - $ref: '#/components/parameters/getTradeLimit'
      responses:
        '200':
          description: trade list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tradesListResponse'
        '418':
          $ref: '#/components/responses/ipBanned'
        '429':
          $ref: '#/components/responses/rateLimit'
        '504':
          $ref: '#/components/responses/timeout'
        4XX:
          $ref: '#/components/responses/malformedRequests'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /api/v1/historicalTrades:
    get:
      tags:
        - Public API Endpoints
      summary: Get older trades (up to last 500).
      operationId: GetHistoricalTradesList
      parameters:
        - $ref: '#/components/parameters/symbol'
        - $ref: '#/components/parameters/getTradeLimit'
        - $ref: '#/components/parameters/fromId'
      responses:
        '200':
          description: trade list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tradesListResponse'
        '418':
          $ref: '#/components/responses/ipBanned'
        '429':
          $ref: '#/components/responses/rateLimit'
        '504':
          $ref: '#/components/responses/timeout'
        4XX:
          $ref: '#/components/responses/malformedRequests'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /api/v1/klines:
    get:
      tags:
        - Public API Endpoints
      summary: Kline/Candlestick data.
      description: Kline/candlestick bars for a symbol. Klines are uniquely identified by their open time.
      operationId: GetCandlestickData
      parameters:
        - $ref: '#/components/parameters/symbol'
        - $ref: '#/components/parameters/getTradeLimit'
        - $ref: '#/components/parameters/fromId'
      responses:
        '200':
          description: trade list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tradesListResponse'
        '418':
          $ref: '#/components/responses/ipBanned'
        '429':
          $ref: '#/components/responses/rateLimit'
        '504':
          $ref: '#/components/responses/timeout'
        4XX:
          $ref: '#/components/responses/malformedRequests'
        5XX:
          $ref: '#/components/responses/internalServerError'
components:
  responses:
    malformedRequests:
      description: return codes are used for for malformed requests; the issue is on the sender's side
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
    rateLimit:
      description: return code is used when breaking a request rate limit.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
    ipBanned:
      description: return code is used when an IP has been auto-banned for continuing to send requests after receiving 429 codes.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
    internalServerError:
      description: return codes are used for internal errors; the issue is on Binance's side.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
    timeout:
      description: return code is used when the API successfully sent the message but not get a response within the timeout period. It is important to NOT treat this as a failure; the execution status is UNKNOWN and could have been a success.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
  schemas:
    exchangeInformationResponse:
      type: object
      properties:
        timezone:
          type: string
          example: UTC
        serverTime:
          type: integer
          format: int64
          example: 1508631584636
        rateLimits:
          type: array
          items:
            $ref: '#/components/schemas/rateLimit'
        exchangeFilters:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/EXCHANGE_MAX_NUM_ORDERS'
              - $ref: '#/components/schemas/EXCHANGE_MAX_ALGO_ORDERS'
            discriminator:
              propertyName: filterType
        symbols:
          type: array
          items:
            $ref: '#/components/schemas/symbol'
      required:
        - timezone
        - serverTime
        - rateLimits
        - exchangeFilters
        - symbols
    errorResponse:
      type: object
      properties:
        code:
          type: integer
          example: '-1121,'
        msg:
          type: string
          example: Invalid symbol.
      required:
        - code
        - msg
    filter:
      type: object
      properties:
        filterType:
          type: string
          enum:
            - PRICE_FILTER
            - LOT_SIZE
            - MIN_NOTIONAL
            - MAX_NUM_ORDERS
            - MAX_ALGO_ORDERS
      discriminator:
        propertyName: filterType
      required:
        - fitlerType
    PRICE_FILTER:
      description: The PRICE_FILTER defines the price rules for a symbol.
      allOf:
        - $ref: '#/components/schemas/filter'
        - type: object
          properties:
            minPrice:
              type: number
              format: double
              description: defines the minimum price/stopPrice allowed.
              example: 0.000001
            maxPrice:
              type: number
              format: double
              description: defines the maximum price/stopPrice allowed.
              example: 100000
            tickSize:
              type: number
              format: double
              description: defines the intervals that a price/stopPrice can be increased/decreased by.
              example: 0.000001
          required:
            - minPrice
            - maxPrice
            - tickSize
    LOT_SIZE:
      description: The LOT_SIZE filter defines the quantity (aka 'Lots' in auction terms) rules for a symbol.
      allOf:
        - $ref: '#/components/schemas/filter'
        - type: object
          properties:
            minQty:
              type: number
              format: double
              description: defines the minimum quantity/icebergQty allowed.
              example: 0.001
            maxQty:
              type: number
              format: double
              description: defines the maximum quantity/icebergQty allowed.
              example: 100000
            stepSize:
              type: number
              format: double
              description: defines the intervals that a quantity/icebergQty can be increased/decreased by.
              example: 0.001
          required:
            - minQty
            - maxQty
            - stepSize
    MIN_NOTIONAL:
      description: The MIN_NOTIONAL filter defines the minimum notional value allowed for an order on a symbol. An order's notional value is the price * quantity.
      allOf:
        - $ref: '#/components/schemas/filter'
        - type: object
          properties:
            minNotional:
              type: number
              format: double
              example: 0.001
          required:
            - minNotional
    MAX_NUM_ORDERS:
      description: The MAX_NUM_ORDERS filter defines the maximum number of orders an account is allowed to have open on a symbol. Note that both "algo" orders and normal orders are counted for this filter.
      allOf:
        - $ref: '#/components/schemas/filter'
        - type: object
          properties:
            limit:
              type: integer
              example: 25
          required:
            - limit
    MAX_ALGO_ORDERS:
      description: 'The MAX_ALGO_ORDERS filter defines the maximum number of "algo" orders an account is allowed to have open on a symbol. "Algo" orders are STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.'
      allOf:
        - $ref: '#/components/schemas/filter'
        - type: object
          properties:
            limit:
              type: integer
              example: 5
          required:
            - limit
    exchangeFilter:
      type: object
      properties:
        filterType:
          type: string
          enum:
            - EXCHANGE_MAX_NUM_ORDERS
            - EXCHANGE_MAX_ALGO_ORDERS
      discriminator:
        propertyName: filterType
      required:
        - filterType
    EXCHANGE_MAX_NUM_ORDERS:
      description: The MAX_NUM_ORDERS filter defines the maximum number of orders an account is allowed to have open on the exchange. Note that both "algo" orders and normal orders are counted for this filter.
      allOf:
        - $ref: '#/components/schemas/exchangeFilter'
        - type: object
          properties:
            limit:
              type: integer
              example: 1000
          required:
            - limit
    EXCHANGE_MAX_ALGO_ORDERS:
      description: 'The MAX_ALGO_ORDERS filter defines the maximum number of "algo" orders an account is allowed to have open on the exchange. "Algo" orders are STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.'
      allOf:
        - $ref: '#/components/schemas/exchangeFilter'
        - type: object
          properties:
            limit:
              type: integer
              example: 200
          required:
            - limit
    symbol:
      type: object
      properties:
        symbol:
          type: string
          example: ETHBTC
        status:
          type: string
          enum:
            - PRE_TRADING
            - TRADING
            - POST_TRADING
            - END_OF_DAY
            - HALT
            - AUCTION_MATCH
            - BREAK
        baseAsset:
          type: string
          example: ETH
        baseAssetPrecision:
          type: integer
          example: 8
        quoteAsset:
          type: string
          example: 'BTC,'
        quotePrecision:
          type: integer
          example: 8
        orderTypes:
          type: array
          items:
            type: string
            enum:
              - LIMIT
              - MARKET
              - STOP_LOSS
              - STOP_LOSS_LIMIT
              - TAKE_PROFIT
              - TAKE_PROFIT_LIMIT
              - LIMIT_MAKER
        icebergAllowed:
          type: boolean
        filters:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/PRICE_FILTER'
              - $ref: '#/components/schemas/LOT_SIZE'
              - $ref: '#/components/schemas/MIN_NOTIONAL'
              - $ref: '#/components/schemas/MAX_NUM_ORDERS'
              - $ref: '#/components/schemas/MAX_ALGO_ORDERS'
              - $ref: '#/components/schemas/MAX_ALGO_ORDERS'
              - $ref: '#/components/schemas/MAX_ALGO_ORDERS'
            discriminator:
              propertyName: filterType
      required:
        - symbol
        - status
        - baseAsset
        - baseAssetPrecision
        - quoteAsset
        - quotePrecision
        - orderTypes
        - icebergAllowed
        - filters
    rateLimit:
      type: object
      properties:
        rateLimitType:
          type: string
          enum:
            - REQUESTS
            - ORDERS
        interval:
          type: string
          enum:
            - SECOND
            - MINUTE
            - DAY
        limit:
          type: integer
          example: 100000
      required:
        - rateLimitType
        - interval
        - limit
    timeResponse:
      type: object
      properties:
        serverTime:
          type: integer
          format: int64
          description: unix time in ms
      required:
        - serverTime
    trade:
      type: object
      properties:
          id: 
            type: integer
            format: int64
            example: 28457,
          price:
            type: number
            format: double
            example: 4.00000100
          qty:
            type: number
            format: double
            example: 12.00000000
          time:
            type: integer
            format: int64
            example: 1499865549590
          isBuyerMaker:
            type: boolean
          isBestMatch: 
            type: boolean
    tradesListResponse:
      type: array
      items:
        $ref: '#/components/schemas/trade'
    orderBookResponse:
      type: object
      properties:
        lastUpdateId:
          type: integer
          format: int64
          example: 1027024
        bids:
          type: array
          items:
            oneOf:
              - type: number
                format: double
              - type: array
          minItems: 2
          maxItems: 3
        asks:
          type: array
          items:
            oneOf:
              - type: number
                format: double
              - type: array
            minItems: 2
            maxItems: 3
  parameters:
    symbol:
      name: symbol
      in: query
      schema:
        type: string
      required: true
    limit:
      name: limit
      in: query
      schema:
        type: integer
        enum:
          - 5
          - 10
          - 20
          - 50
          - 100
          - 500
          - 1000
    getTradeLimit:
      name: limit
      in: query
      description: Default 500; max 500.
      schema:
        type: integer
        minimum: 0
        maximum: 500
        default: 500
    fromId:
      name: fromId
      in: query
      description: TradeId to fetch from. Default gets most recent trades.
      schema:
        type: integer
        format: int64
     
