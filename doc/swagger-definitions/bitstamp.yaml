openapi: 3.0.0
info:
  description: |
    [bitstamp documentation](https://www.bitstamp.net/api/)
  version: 1.0.0
  title: Bitstamp API
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://www.bitstamp.net/api'
tags:
  - name: PUBLIC DATA FUNCTIONS
  - name: PRIVATE FUNCTIONS
paths:
  '/v2/ticker/{currency_pair}':
    get:
      tags:
        - PUBLIC DATA FUNCTIONS
      summary: Get Ticker Data
      operationId: GetTicker
      parameters:
        - $ref: '#/components/parameters/currencyPair'
      responses:
        '200':
          description: ticker
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticker'
  '/v2/ticker_hour/{currency_pair}':
    get:
      tags:
        - PUBLIC DATA FUNCTIONS
      summary: Get Hourly Ticker Data
      operationId: GetHourlyTickerList
      description: |
        Returns a JSON dictionary like the ticker call, with the calculated values being from within an hour.
      parameters:
        - $ref: '#/components/parameters/currencyPair'
      responses:
        '200':
          description: ticker
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticker'
  '/v2/order_book/{currency_pair}':
    get:
      tags:
        - PUBLIC DATA FUNCTIONS
      summary: Get Order book data
      operationId: GetOrderBook
      description: |
        Returns a JSON dictionary with "bids" and "asks". Each is a list of open orders and each order is represented as a list holding the price and the amount.
      parameters:
        - $ref: '#/components/parameters/currencyPair'
      responses:
        '200':
          description: orbder book list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderBookResponse'
  '/v2/transactions/{currency_pair}':
    get:
      tags:
        - PUBLIC DATA FUNCTIONS
      summary: Get Transactions data
      operationId: GetTransactions
      description: |
        Returns a descending list of transactions.
      parameters:
        - $ref: '#/components/parameters/currencyPair'
        - $ref: '#/components/parameters/time'
      responses:
        '200':
          description: transaction list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transactionList'
  '/v2/trading-pairs-info':
    get:
      tags:
        - PUBLIC DATA FUNCTIONS
      summary: Get Trading Pairs Data
      operationId: GetTradingPairs
      description: |
        Returns a list of trading pair info
      responses:
        '200':
          description: trading pair list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tradingPairList'
  '/eur_usd':
    get:
      tags:
        - PUBLIC DATA FUNCTIONS
      summary: EUR/USD CONVERSION RATE
      operationId: GetEurUseConversiontRates
      description: |
        Returns a list of trading pair info
      responses:
        '200':
          description: conversion rates for buy and sell
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversionRate'
  '/v2/balance':
    post:
      tags:
        - PRIVATE FUNCTIONS
      summary: Returns all the balances.
      operationId: GetBalances
      description: |
        Returns all the balances.
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/signature'
      responses:
        '200':
          description: all the balances
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/balance'
  '/v2/balance/{currency_pair}':
    post:
      tags:
        - PRIVATE FUNCTIONS
      summary: Returns all the balances.
      operationId: GetBalance
      description: |
        Returns all the balances.
      parameters:
        - $ref: '#/components/parameters/currencyPair'
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/signature'
      responses:
        '200':
          description: values relevant to the specified currency_pair parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/balance'
  '/v2/user_transactions':
    post:
      tags:
        - PRIVATE FUNCTIONS
      summary:  Returns a descending list of transactions.
      operationId: GetTransactions
      description: |
        Returns all the balances.
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/signature'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description:  transactions, represented as dictionaries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userTransactionList'
components:
  schemas:
    balance:
      type: object
      properties:
        usd_balance:
          type: number
          format: double
          description: USD balance.
        btc_balance:
          type: number
          format: double
          description: BTC balance.
        eur_balance:
          type: number
          format: double
          description: EUR balance.
        xrp_balance:
          type: number
          format: double
          description: XRP balance.
        usd_reserved:
          type: number
          format: double
          description: USD reserved.
        btc_reserved:
          type: number
          format: double
          description: BTC reserved.
        eur_reserved:
          type: number
          format: double
          description: EUR reserved.
        xrp_reserved:
          type: number
          format: double
          description: XRP reserved.
        usd_available:
          type: number
          format: double
          description: USD available for trading.
        btc_available:
          type: number
          format: double
          description: BTC available for trading.
        eur_available:
          type: number
          format: double
          description: EUR available for trading.
        xrp_available:
          type: number
          format: double
          description: XRP available for trading.
        btcusd_fee:
          type: number
          format: double
          description: Customer BTC/USD trading fee.
        btceur_fee:
          type: number
          format: double
          description: Customer BTC/EUR trading fee.
        eurusd_fee:
          type: number
          format: double
          description: Customer EUR/USD trading fee.
        xrpusd_fee:
          type: number
          format: double
          description: Customer XRP/USD trading fee.
        xrpeur_fee:
          type: number
          format: double
          description: Customer XRP/EUR trading fee.
        xrpbtc_fee:
          type: number
          format: double
          description: Customer XRP/BTC trading fee.
        fee:
          type: number
          format: double
          description: Customer trading fee.
    bid:
      type: array
      items:
        type: number
        format: double
      minItems: 2
      maxItems: 2
    conversionRate:
      type: object
      properties:
        buy:
          type: number
          format: double
        sell:
          type: number
          format: double
      required:
        - buy
        - sell
    orderBookResponse:
      type: object
      properties:
        timestamp:
          type: integer
          format: int64
          example: 1529360859
        bids:
          type: array
          items:
            $ref: '#/components/schemas/bid'
      required:
        - timestamp
        - bids
    ticker:
      type: object
      properties:
        last:
          type: number
          format: double
          description: Last BTC price.
        high:
          type: number
          format: double
          description: Last 24 hours price high.
        low:
          type: number
          format: double
          description: Last 24 hours price low.
        vwap:
          type: number
          format: double
          description: Last 24 hours volume weighted average price.
        volume:
          type: number
          format: double
          description: Last 24 hours volume.
        bid:
          type: number
          format: double
          description: Highest buy order.
        ask:
          type: number
          format: double
          description: Lowest sell order.
        timestamp:
          type: integer
          format: in64
          description: Unix timestamp date and time.
        open:
          type: number
          format: double
          description: First price of the day.
      required:
        - last
        - high
        - low
        - vwap
        - volume
        - bid
        - ask
        - timestamp
        - open
    tradingPairList:
      type: array
      items:
        $ref: '#/components/schemas/tradingPair'
    tradingPair:
      properties:
        name:
          type: string
          description: Trading pair.
        url_symbol:
          type: string
          description: URL symbol of trading pair.
        base_decimals:
          type: integer
          description: 'Decimal precision for base currency (BTC/USD - base'':'' BTC).'
        counter_decimals:
          type: integer
          description: 'Decimal precision for counter currency (BTC/USD - counter'':'' USD).'
        minimum_order:
          type: string
          description: Minimum order size.
        trading:
          type: string
          enum:
            - Enabled
            - Disabled
          description: Trading engine status (Enabled/Disabled).
        description:
          type: string
          description: Trading pair description.
      required:
        - name
        - url_symbol
        - base_decimals
        - counter_decimals
        - minimum_order
        - trading
        - description
    transactionList:
      type: array
      items:
        $ref: '#/components/schemas/transaction'
    transaction:
      properties:
        date:
          type: integer
          format: int64
          description: Unix timestamp date and time.
        tid:
          type: integer
          format: int64
          description: Transaction ID.
        price:
          type: number
          format: double
          description: BTC price.
        amount:
          type: number
          format: double
          description: BTC amount.
        type:
          type: integer
          minimum: 0
          maximum: 1
      required:
        - date
        - tid
        - price
        - amount
        - type
    userTransactionList:
      type: array
      items:
        $ref: '#/components/schemas/userTransaction'
    userTransaction:
      type: object
      properties:
        datetime:
          type: string
          format: date-time
          description: Date and time.
        id:
          type: integer
          format: int64
          description: Transaction ID.
        type:
          type: integer
          enum:
            - 0
            - 1
            - 2
            - 14
          description: Transaction type':' 0 - deposit; 1 - withdrawal; 2 - market trade; 14 - sub account transfer.
        usd:
          type: number
          format: double
          description: USD amount.
        eur:
          type: number
          format: double
          description: (v2 calls only)  EUR amount.
        btc:
          type: number
          format: double
          description: BTC amount.
        xrp:
          type: number
          format: double
          description: (v2 calls only)  XRP amount.
        btc_usd:
          type: number
          format: double
          description: (or btc_eur if available)  Exchange rate.
        fee:
          type: number
          format: double
          description: Transaction fee.
        order_id:
          type: string
          description: Executed order ID.
      required:
        - datetime
        - id
        - type
        - usd
        - eur
        - btc
        - xrp
        - btc_usd
        - fee
        - order_id
  parameters:
    currencyPair:
      in: path
      name: currency_pair
      required: true
      schema:
        type: string
        description: 'Supported values for currency_pair'':'' btcusd, btceur, eurusd, xrpusd, xrpeur, xrpbtc, ltcusd, ltceur, ltcbtc, ethusd, etheur, ethbtc, bchusd, bcheur, bchbtc'
    time:
      in: query
      name: time
      schema:
        type: string
        enum:
          - minute
          - hour
          - day
    key:
      name: key
      in: query
      schema:
        type: string
        description: To get an API key, go to "Account", "Security" and then "API Access". Set permissions and click "Generate key".
    nonce:
      name: nonce
      in: query
      schema:
        type: integer
        format: int64
        description: Nonce is a regular integer number. It must be increased with every request you make. Read more about it here. Example':' if you set nonce to 1 in your first request, you must set it to at least 2 in your second request. You are not required to start with 1. A common practice is to use unix time for that parameter.
    signature:
      name: signature
      in: query
      schema:
        type: string
        description: Signature is a HMAC-SHA256 encoded message containing nonce, customer ID (can be found here) and API key. The HMAC-SHA256 code must be generated using a secret key that was generated with your API key. This code must be converted to it's hexadecimal representation (64 uppercase characters).
    offset:
      name: offset
      in: query
      schema:
        type: integer
        description: Skip that many transactions before returning results (default':' 0).
        minimum: 0
    limit:
      name: limit
      in: query
      schema:
        type: integer
        description: Limit result to that many transactions (default':' 100; maximum':' 1000).
        minimum: 0
        maximum: 1000
    sort:
      name: sort
      in: query
      schema:
        type: string
        enum:
          - asc
          - desc
        description: Sorting by date and time':' asc - ascending; desc - descending (default':' desc).
