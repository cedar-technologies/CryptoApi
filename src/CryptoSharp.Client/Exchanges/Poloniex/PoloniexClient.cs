//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.12.0 (NJsonSchema v9.10.50.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace CryptoSharp.Client.Exchanges.Poloniex
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.12.0 (NJsonSchema v9.10.50.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IPoloniexClient
    {
        /// <summary>public API</summary>
        /// <param name="start">The start date as unix millisecond timestamp (returnTradeHistory, returnChartData)</param>
        /// <param name="end">The end date as unix millisecond timestamp (returnTradeHistory, returnChartData)</param>
        /// <param name="depth">depth of the order book (returnOrderBook, returnTradeHistory, returnChartData)</param>
        /// <param name="period">candlestick period in seconds; valid values (returnChartData)</param>
        /// <param name="currency">a given currency (returnLoanOrders)</param>
        /// <returns>One of the public response schema</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> PublicCommandAsync(Command command, string currencyPair, long? start, long? end, int? depth, Period? period, string currency);
    
        /// <summary>public API</summary>
        /// <param name="start">The start date as unix millisecond timestamp (returnTradeHistory, returnChartData)</param>
        /// <param name="end">The end date as unix millisecond timestamp (returnTradeHistory, returnChartData)</param>
        /// <param name="depth">depth of the order book (returnOrderBook, returnTradeHistory, returnChartData)</param>
        /// <param name="period">candlestick period in seconds; valid values (returnChartData)</param>
        /// <param name="currency">a given currency (returnLoanOrders)</param>
        /// <returns>One of the public response schema</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Response> PublicCommandAsync(Command command, string currencyPair, long? start, long? end, int? depth, Period? period, string currency, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Trading API</summary>
        /// <param name="key">Your API key</param>
        /// <param name="sign">The query's POST data signed by your key's "secret" according to the HMAC-SHA512 method.</param>
        /// <param name="currency">a given currency (returnLoanOrders)</param>
        /// <param name="start">The start date as unix millisecond timestamp (returnTradeHistory, returnChartData)</param>
        /// <param name="end">The end date as unix millisecond timestamp (returnTradeHistory, returnChartData)</param>
        /// <param name="orderNumber">a given order</param>
        /// <param name="rate">rate</param>
        /// <param name="amount">amount</param>
        /// <param name="address">Currency address</param>
        /// <param name="lendingRate">lendingRate</param>
        /// <returns>One of the Trading API response schema</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response2> TradingApiAsync(string key, string sign, Command2 command, Account? account, string currency, long? start, long? end, string currencyPair, int? orderNumber, double? rate, double? amount, string address, string paymentId, string fromAccount, string toAccount, double? lendingRate, int? duration, AutoRenew? autoRenew);
    
        /// <summary>Trading API</summary>
        /// <param name="key">Your API key</param>
        /// <param name="sign">The query's POST data signed by your key's "secret" according to the HMAC-SHA512 method.</param>
        /// <param name="currency">a given currency (returnLoanOrders)</param>
        /// <param name="start">The start date as unix millisecond timestamp (returnTradeHistory, returnChartData)</param>
        /// <param name="end">The end date as unix millisecond timestamp (returnTradeHistory, returnChartData)</param>
        /// <param name="orderNumber">a given order</param>
        /// <param name="rate">rate</param>
        /// <param name="amount">amount</param>
        /// <param name="address">Currency address</param>
        /// <param name="lendingRate">lendingRate</param>
        /// <returns>One of the Trading API response schema</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Response2> TradingApiAsync(string key, string sign, Command2 command, Account? account, string currency, long? start, long? end, string currencyPair, int? orderNumber, double? rate, double? amount, string address, string paymentId, string fromAccount, string toAccount, double? lendingRate, int? duration, AutoRenew? autoRenew, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.12.0 (NJsonSchema v9.10.50.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PoloniexClient : IPoloniexClient
    {
        private string _baseUrl = " https://poloniex.com";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public PoloniexClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>public API</summary>
        /// <param name="start">The start date as unix millisecond timestamp (returnTradeHistory, returnChartData)</param>
        /// <param name="end">The end date as unix millisecond timestamp (returnTradeHistory, returnChartData)</param>
        /// <param name="depth">depth of the order book (returnOrderBook, returnTradeHistory, returnChartData)</param>
        /// <param name="period">candlestick period in seconds; valid values (returnChartData)</param>
        /// <param name="currency">a given currency (returnLoanOrders)</param>
        /// <returns>One of the public response schema</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response> PublicCommandAsync(Command command, string currencyPair, long? start, long? end, int? depth, Period? period, string currency)
        {
            return PublicCommandAsync(command, currencyPair, start, end, depth, period, currency, System.Threading.CancellationToken.None);
        }
    
        /// <summary>public API</summary>
        /// <param name="start">The start date as unix millisecond timestamp (returnTradeHistory, returnChartData)</param>
        /// <param name="end">The end date as unix millisecond timestamp (returnTradeHistory, returnChartData)</param>
        /// <param name="depth">depth of the order book (returnOrderBook, returnTradeHistory, returnChartData)</param>
        /// <param name="period">candlestick period in seconds; valid values (returnChartData)</param>
        /// <param name="currency">a given currency (returnLoanOrders)</param>
        /// <returns>One of the public response schema</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response> PublicCommandAsync(Command command, string currencyPair, long? start, long? end, int? depth, Period? period, string currency, System.Threading.CancellationToken cancellationToken)
        {
            if (command == null)
                throw new System.ArgumentNullException("command");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/public?");
            urlBuilder_.Append("command=").Append(System.Uri.EscapeDataString(ConvertToString(command, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (currencyPair != null) urlBuilder_.Append("currencyPair=").Append(System.Uri.EscapeDataString(ConvertToString(currencyPair, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (start != null) urlBuilder_.Append("start=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (end != null) urlBuilder_.Append("end=").Append(System.Uri.EscapeDataString(ConvertToString(end, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (depth != null) urlBuilder_.Append("depth=").Append(System.Uri.EscapeDataString(ConvertToString(depth, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (period != null) urlBuilder_.Append("period=").Append(System.Uri.EscapeDataString(ConvertToString(period, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (currency != null) urlBuilder_.Append("currency=").Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Trading API</summary>
        /// <param name="key">Your API key</param>
        /// <param name="sign">The query's POST data signed by your key's "secret" according to the HMAC-SHA512 method.</param>
        /// <param name="currency">a given currency (returnLoanOrders)</param>
        /// <param name="start">The start date as unix millisecond timestamp (returnTradeHistory, returnChartData)</param>
        /// <param name="end">The end date as unix millisecond timestamp (returnTradeHistory, returnChartData)</param>
        /// <param name="orderNumber">a given order</param>
        /// <param name="rate">rate</param>
        /// <param name="amount">amount</param>
        /// <param name="address">Currency address</param>
        /// <param name="lendingRate">lendingRate</param>
        /// <returns>One of the Trading API response schema</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response2> TradingApiAsync(string key, string sign, Command2 command, Account? account, string currency, long? start, long? end, string currencyPair, int? orderNumber, double? rate, double? amount, string address, string paymentId, string fromAccount, string toAccount, double? lendingRate, int? duration, AutoRenew? autoRenew)
        {
            return TradingApiAsync(key, sign, command, account, currency, start, end, currencyPair, orderNumber, rate, amount, address, paymentId, fromAccount, toAccount, lendingRate, duration, autoRenew, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Trading API</summary>
        /// <param name="key">Your API key</param>
        /// <param name="sign">The query's POST data signed by your key's "secret" according to the HMAC-SHA512 method.</param>
        /// <param name="currency">a given currency (returnLoanOrders)</param>
        /// <param name="start">The start date as unix millisecond timestamp (returnTradeHistory, returnChartData)</param>
        /// <param name="end">The end date as unix millisecond timestamp (returnTradeHistory, returnChartData)</param>
        /// <param name="orderNumber">a given order</param>
        /// <param name="rate">rate</param>
        /// <param name="amount">amount</param>
        /// <param name="address">Currency address</param>
        /// <param name="lendingRate">lendingRate</param>
        /// <returns>One of the Trading API response schema</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response2> TradingApiAsync(string key, string sign, Command2 command, Account? account, string currency, long? start, long? end, string currencyPair, int? orderNumber, double? rate, double? amount, string address, string paymentId, string fromAccount, string toAccount, double? lendingRate, int? duration, AutoRenew? autoRenew, System.Threading.CancellationToken cancellationToken)
        {
            if (command == null)
                throw new System.ArgumentNullException("command");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tradingApi?");
            urlBuilder_.Append("command=").Append(System.Uri.EscapeDataString(ConvertToString(command, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (account != null) urlBuilder_.Append("account=").Append(System.Uri.EscapeDataString(ConvertToString(account, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (currency != null) urlBuilder_.Append("currency=").Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (start != null) urlBuilder_.Append("start=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (end != null) urlBuilder_.Append("end=").Append(System.Uri.EscapeDataString(ConvertToString(end, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (currencyPair != null) urlBuilder_.Append("currencyPair=").Append(System.Uri.EscapeDataString(ConvertToString(currencyPair, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderNumber != null) urlBuilder_.Append("orderNumber=").Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (rate != null) urlBuilder_.Append("rate=").Append(System.Uri.EscapeDataString(ConvertToString(rate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (amount != null) urlBuilder_.Append("amount=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (address != null) urlBuilder_.Append("address=").Append(System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (paymentId != null) urlBuilder_.Append("paymentId=").Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (fromAccount != null) urlBuilder_.Append("fromAccount=").Append(System.Uri.EscapeDataString(ConvertToString(fromAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (toAccount != null) urlBuilder_.Append("toAccount=").Append(System.Uri.EscapeDataString(ConvertToString(toAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lendingRate != null) urlBuilder_.Append("lendingRate=").Append(System.Uri.EscapeDataString(ConvertToString(lendingRate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (duration != null) urlBuilder_.Append("duration=").Append(System.Uri.EscapeDataString(ConvertToString(duration, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (autoRenew != null) urlBuilder_.Append("autoRenew=").Append(System.Uri.EscapeDataString(ConvertToString(autoRenew, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (key == null)
                        throw new System.ArgumentNullException("key");
                    request_.Headers.TryAddWithoutValidation("Key", ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture));
                    if (sign == null)
                        throw new System.ArgumentNullException("sign");
                    request_.Headers.TryAddWithoutValidation("Sign", ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response2); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response2>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response2);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChartData 
    {
        /// <summary>unix time stamp</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        public int Date { get; set; }
    
        [Newtonsoft.Json.JsonProperty("high", Required = Newtonsoft.Json.Required.Always)]
        public decimal High { get; set; }
    
        [Newtonsoft.Json.JsonProperty("low", Required = Newtonsoft.Json.Required.Always)]
        public decimal Low { get; set; }
    
        [Newtonsoft.Json.JsonProperty("open", Required = Newtonsoft.Json.Required.Always)]
        public decimal Open { get; set; }
    
        [Newtonsoft.Json.JsonProperty("close", Required = Newtonsoft.Json.Required.Always)]
        public decimal Close { get; set; }
    
        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.Always)]
        public decimal Volume { get; set; }
    
        [Newtonsoft.Json.JsonProperty("quoteVolume", Required = Newtonsoft.Json.Required.Always)]
        public decimal QuoteVolume { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weightedAverage", Required = Newtonsoft.Json.Required.Always)]
        public decimal WeightedAverage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ChartData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChartData>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CompleteBalance 
    {
        [Newtonsoft.Json.JsonProperty("available", Required = Newtonsoft.Json.Required.Always)]
        public decimal Available { get; set; }
    
        [Newtonsoft.Json.JsonProperty("onOrders", Required = Newtonsoft.Json.Required.Always)]
        public decimal OnOrders { get; set; }
    
        [Newtonsoft.Json.JsonProperty("btcValue", Required = Newtonsoft.Json.Required.Always)]
        public decimal BtcValue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CompleteBalance FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CompleteBalance>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Currency 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("txFee", Required = Newtonsoft.Json.Required.Always)]
        public decimal TxFee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minConf", Required = Newtonsoft.Json.Required.Always)]
        public int MinConf { get; set; }
    
        [Newtonsoft.Json.JsonProperty("depositAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DepositAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.Always)]
        public CurrencyDisabled Disabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("delisted", Required = Newtonsoft.Json.Required.Always)]
        public CurrencyDelisted Delisted { get; set; }
    
        [Newtonsoft.Json.JsonProperty("frozen", Required = Newtonsoft.Json.Required.Always)]
        public CurrencyFrozen Frozen { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Currency FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Currency>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Deposit 
    {
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Currency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public decimal Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("confirmations", Required = Newtonsoft.Json.Required.Always)]
        public int Confirmations { get; set; }
    
        [Newtonsoft.Json.JsonProperty("txid", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Txid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        public int Timestamp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Deposit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Deposit>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LendingHistory 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Currency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Always)]
        public decimal Rate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public decimal Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Always)]
        public decimal Duration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("interest", Required = Newtonsoft.Json.Required.Always)]
        public decimal Interest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public decimal Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("earned", Required = Newtonsoft.Json.Required.Always)]
        public decimal Earned { get; set; }
    
        [Newtonsoft.Json.JsonProperty("open", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Open { get; set; }
    
        [Newtonsoft.Json.JsonProperty("close", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Close { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LendingHistory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LendingHistory>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Loan 
    {
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Always)]
        public decimal Rate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public decimal Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rangeMin", Required = Newtonsoft.Json.Required.Always)]
        public int RangeMin { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rangeMax", Required = Newtonsoft.Json.Required.Always)]
        public int RangeMax { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Loan FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Loan>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LoanOffer 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Duration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("autoRenew", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoRenew { get; set; }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Date { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LoanOffer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoanOffer>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LoanOrdersResult 
    {
        [Newtonsoft.Json.JsonProperty("offers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Loan> Offers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("demands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Loan> Demands { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LoanOrdersResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoanOrdersResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Market 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("last", Required = Newtonsoft.Json.Required.Always)]
        public decimal Last { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lowestAsk", Required = Newtonsoft.Json.Required.Always)]
        public decimal LowestAsk { get; set; }
    
        [Newtonsoft.Json.JsonProperty("highestBid", Required = Newtonsoft.Json.Required.Always)]
        public decimal HighestBid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("percentChange", Required = Newtonsoft.Json.Required.Always)]
        public decimal PercentChange { get; set; }
    
        [Newtonsoft.Json.JsonProperty("baseVolume", Required = Newtonsoft.Json.Required.Always)]
        public decimal BaseVolume { get; set; }
    
        [Newtonsoft.Json.JsonProperty("quoteVolume", Required = Newtonsoft.Json.Required.Always)]
        public decimal QuoteVolume { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isFrozen", Required = Newtonsoft.Json.Required.Always)]
        public MarketIsFrozen IsFrozen { get; set; }
    
        [Newtonsoft.Json.JsonProperty("high24hr", Required = Newtonsoft.Json.Required.Always)]
        public decimal High24hr { get; set; }
    
        [Newtonsoft.Json.JsonProperty("low24hr", Required = Newtonsoft.Json.Required.Always)]
        public decimal Low24hr { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Market FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Market>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Order 
    {
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OrderNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderType? Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Total { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Order FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Order>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderBookResult 
    {
        [Newtonsoft.Json.JsonProperty("ask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> Ask { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> Bid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isFrozen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderBookResultIsFrozen? IsFrozen { get; set; }
    
        [Newtonsoft.Json.JsonProperty("seq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Seq { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrderBookResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderBookResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderTrade 
    {
        [Newtonsoft.Json.JsonProperty("globalTradeID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GlobalTradeID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tradeID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TradeID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("currencyPair", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyPair { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderTradeType? Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Total { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Date { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrderTrade FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderTrade>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultingTrade 
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public decimal Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Date { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Always)]
        public decimal Rate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Always)]
        public decimal Total { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tradeID", Required = Newtonsoft.Json.Required.Always)]
        public int TradeID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResultingTradeType Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ResultingTrade FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResultingTrade>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Trade 
    {
        [Newtonsoft.Json.JsonProperty("globalTradeID", Required = Newtonsoft.Json.Required.Always)]
        public int GlobalTradeID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tradeID", Required = Newtonsoft.Json.Required.Always)]
        public int TradeID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Date { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TradeType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Always)]
        public decimal Rate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public decimal Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Always)]
        public decimal Total { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Trade FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Trade>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TradeHistory 
    {
        [Newtonsoft.Json.JsonProperty("globalTradeID", Required = Newtonsoft.Json.Required.Always)]
        public int GlobalTradeID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tradeID", Required = Newtonsoft.Json.Required.Always)]
        public int TradeID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Date { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TradeHistoryType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Always)]
        public decimal Rate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public decimal Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Always)]
        public decimal Total { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public decimal Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Always)]
        public int OrderNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TradeHistoryCategory Category { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TradeHistory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TradeHistory>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Withdrawal 
    {
        [Newtonsoft.Json.JsonProperty("withdrawalNumber", Required = Newtonsoft.Json.Required.Always)]
        public int WithdrawalNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Currency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public decimal Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        public int Timestamp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ipAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string IpAddress { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Withdrawal FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Withdrawal>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GenerateNewAddressResult 
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Response { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GenerateNewAddressResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GenerateNewAddressResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReturnDepositsWithdrawalsResult 
    {
        [Newtonsoft.Json.JsonProperty("deposits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Deposit> Deposits { get; set; }
    
        [Newtonsoft.Json.JsonProperty("withdrawals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Withdrawal> Withdrawals { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReturnDepositsWithdrawalsResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReturnDepositsWithdrawalsResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BuyResult 
    {
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Always)]
        public int OrderNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resultingTrades", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ResultingTrades { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BuyResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BuyResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SellResult 
    {
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Always)]
        public int OrderNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resultingTrades", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ResultingTrades { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SellResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SellResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CancelOrderResult 
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CancelOrderResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CancelOrderResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MoveOrderResult 
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Always)]
        public int OrderNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resultingTrades", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, ResultingTrade> ResultingTrades { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MoveOrderResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MoveOrderResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WithdrawResult 
    {
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Response { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WithdrawResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WithdrawResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReturnFeeInfoResult 
    {
        [Newtonsoft.Json.JsonProperty("makerFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MakerFee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("takerFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TakerFee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("thirtyDayVolume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ThirtyDayVolume { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nextTier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NextTier { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReturnFeeInfoResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReturnFeeInfoResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReturnAvailableAccountBalancesResult 
    {
        [Newtonsoft.Json.JsonProperty("exchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, double> Exchange { get; set; }
    
        [Newtonsoft.Json.JsonProperty("margin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, double> Margin { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lending", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, double> Lending { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReturnAvailableAccountBalancesResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReturnAvailableAccountBalancesResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TransferBalanceResult 
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferBalanceResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferBalanceResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReturnMarginAccountSummaryResult 
    {
        [Newtonsoft.Json.JsonProperty("totalValue", Required = Newtonsoft.Json.Required.Always)]
        public decimal TotalValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pl", Required = Newtonsoft.Json.Required.Always)]
        public decimal Pl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lendingFees", Required = Newtonsoft.Json.Required.Always)]
        public decimal LendingFees { get; set; }
    
        [Newtonsoft.Json.JsonProperty("netValue", Required = Newtonsoft.Json.Required.Always)]
        public decimal NetValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("totalBorrowedValue", Required = Newtonsoft.Json.Required.Always)]
        public decimal TotalBorrowedValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("currentMargin", Required = Newtonsoft.Json.Required.Always)]
        public decimal CurrentMargin { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReturnMarginAccountSummaryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReturnMarginAccountSummaryResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MarginBuyResult 
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OrderNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resultingTrades", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, ResultingTrade> ResultingTrades { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MarginBuyResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MarginBuyResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MarginSellResult 
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OrderNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resultingTrades", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, ResultingTrade> ResultingTrades { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MarginSellResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MarginSellResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetMarginPositionResult 
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Total { get; set; }
    
        [Newtonsoft.Json.JsonProperty("basePrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BasePrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("liquidationPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LiquidationPrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Pl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lendingFees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LendingFees { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GetMarginPositionResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetMarginPositionResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CloseMarginPositionResult 
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OrderNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resultingTrades", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, ResultingTrade> ResultingTrades { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CloseMarginPositionResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CloseMarginPositionResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateLoanOfferResult 
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("orderID", Required = Newtonsoft.Json.Required.Always)]
        public int OrderID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateLoanOfferResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateLoanOfferResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CancelLoanOfferResult 
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CancelLoanOfferResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CancelLoanOfferResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ToggleAutoRenewResult 
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Message { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ToggleAutoRenewResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ToggleAutoRenewResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Command
    {
        [System.Runtime.Serialization.EnumMember(Value = "returnTicker")]
        ReturnTicker = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "return24hVolume")]
        Return24hVolume = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "returnOrderBook")]
        ReturnOrderBook = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "returnTradeHistory")]
        ReturnTradeHistory = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "returnChartData")]
        ReturnChartData = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "returnCurrencies")]
        ReturnCurrencies = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "returnLoanOrders")]
        ReturnLoanOrders = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Period
    {
        _300 = 300,
    
        _900 = 900,
    
        _1800 = 1800,
    
        _7200 = 7200,
    
        _14400 = 14400,
    
        _86400 = 86400,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Command2
    {
        [System.Runtime.Serialization.EnumMember(Value = "returnBalances")]
        ReturnBalances = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "returnCompleteBalances")]
        ReturnCompleteBalances = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "returnDepositAddresses")]
        ReturnDepositAddresses = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "generateNewAddress")]
        GenerateNewAddress = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "returnDepositsWithdrawals")]
        ReturnDepositsWithdrawals = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "returnOpenOrders")]
        ReturnOpenOrders = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "returnTradeHistory")]
        ReturnTradeHistory = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "returnOrderTrades")]
        ReturnOrderTrades = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "buy")]
        Buy = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "sell")]
        Sell = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "cancelOrder")]
        CancelOrder = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "moveOrder")]
        MoveOrder = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "withdraw")]
        Withdraw = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "returnFeeInfo")]
        ReturnFeeInfo = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "returnAvailableAccountBalances")]
        ReturnAvailableAccountBalances = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "returnTradableBalances")]
        ReturnTradableBalances = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "transferBalance")]
        TransferBalance = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "returnMarginAccountSummary")]
        ReturnMarginAccountSummary = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = "marginBuy")]
        MarginBuy = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = "marginSell")]
        MarginSell = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = "getMarginPosition")]
        GetMarginPosition = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = "closeMarginPosition")]
        CloseMarginPosition = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = "createLoanOffer")]
        CreateLoanOffer = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = "cancelLoanOffer")]
        CancelLoanOffer = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = "returnOpenLoanOffers")]
        ReturnOpenLoanOffers = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = "returnActiveLoans")]
        ReturnActiveLoans = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = "returnLendingHistory")]
        ReturnLendingHistory = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = "toggleAutoRenew")]
        ToggleAutoRenew = 27,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Account
    {
        [System.Runtime.Serialization.EnumMember(Value = "all")]
        All = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AutoRenew
    {
        _0 = 0,
    
        _1 = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Response 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Response2 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response2>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CurrencyDisabled
    {
        _0 = 0,
    
        _1 = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CurrencyDelisted
    {
        _0 = 0,
    
        _1 = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CurrencyFrozen
    {
        _0 = 0,
    
        _1 = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MarketIsFrozen
    {
        _0 = 0,
    
        _1 = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderType
    {
        [System.Runtime.Serialization.EnumMember(Value = "sell")]
        Sell = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "buy")]
        Buy = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderBookResultIsFrozen
    {
        _0 = 0,
    
        _1 = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderTradeType
    {
        [System.Runtime.Serialization.EnumMember(Value = "sell")]
        Sell = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "buy")]
        Buy = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ResultingTradeType
    {
        [System.Runtime.Serialization.EnumMember(Value = "buy")]
        Buy = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "sell")]
        Sell = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TradeType
    {
        [System.Runtime.Serialization.EnumMember(Value = "buy")]
        Buy = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "sell")]
        Sell = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TradeHistoryType
    {
        [System.Runtime.Serialization.EnumMember(Value = "buy")]
        Buy = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "sell")]
        Sell = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TradeHistoryCategory
    {
        [System.Runtime.Serialization.EnumMember(Value = "exchange")]
        Exchange = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "lending")]
        Lending = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "margin")]
        Margin = 2,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.12.0 (NJsonSchema v9.10.50.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.12.0 (NJsonSchema v9.10.50.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}