//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.12.0 (NJsonSchema v9.10.50.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace CryptoSharp.Client.Exchanges.Bittrex
{
#pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.12.0 (NJsonSchema v9.10.50.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IBittrexClient
    {
        /// <summary>Market Meta Data</summary>
        /// <returns>Markets data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarketListResult> GetMarketsAsync();

        /// <summary>Market Meta Data</summary>
        /// <returns>Markets data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<MarketListResult> GetMarketsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>Currency Meta Data</summary>
        /// <returns>Currencies data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyListResult> GetCurrenciesAsync();

        /// <summary>Currency Meta Data</summary>
        /// <returns>Currencies data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<CurrencyListResult> GetCurrenciesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>Get Ticker</summary>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>ticker data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TickerResult> GetTickerAsync(string market);

        /// <summary>Get Ticker</summary>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>ticker data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<TickerResult> GetTickerAsync(string market, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get Market Summary</summary>
        /// <returns>market summaries data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarketSummariesResult> GetMarketSummariesAsync();

        /// <summary>Get Market Summary</summary>
        /// <returns>market summaries data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<MarketSummariesResult> GetMarketSummariesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>Get Market Summary</summary>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>market summary</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarketSummaryResult> GetMarketSummaryAsync(string market);

        /// <summary>Get Market Summary</summary>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>market summary</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<MarketSummaryResult> GetMarketSummaryAsync(string market, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get Order Book</summary>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <param name="type">buy, sell or both to identify the type of orderbook to return</param>
        /// <returns>order book data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderBookResult> GetOrderBookAsync(string market, Type? type);

        /// <summary>Get Order Book</summary>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <param name="type">buy, sell or both to identify the type of orderbook to return</param>
        /// <returns>order book data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<OrderBookResult> GetOrderBookAsync(string market, Type? type, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get Market History</summary>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>order book data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarketHistoryResult> GetMarketHistoryAsync(string market);

        /// <summary>Get Market History</summary>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>order book data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<MarketHistoryResult> GetMarketHistoryAsync(string market, System.Threading.CancellationToken cancellationToken);

        /// <summary>place a buy order.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <param name="quantity">the amount to purchase</param>
        /// <param name="rate">the rate at which to place the order</param>
        /// <returns>Returns you the order uuid</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderPlacedResult> PlaceBuyOrderAsync(string apisign, string apikey, string market, double quantity, double rate);

        /// <summary>place a buy order.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <param name="quantity">the amount to purchase</param>
        /// <param name="rate">the rate at which to place the order</param>
        /// <returns>Returns you the order uuid</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<OrderPlacedResult> PlaceBuyOrderAsync(string apisign, string apikey, string market, double quantity, double rate, System.Threading.CancellationToken cancellationToken);

        /// <summary>place a sell order.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <param name="quantity">the amount to purchase</param>
        /// <param name="rate">the rate at which to place the order</param>
        /// <returns>Returns you the order uuid</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderPlacedResult> PlaceSellOrderAsync(string apisign, string apikey, string market, double quantity, double rate);

        /// <summary>place a sell order.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <param name="quantity">the amount to purchase</param>
        /// <param name="rate">the rate at which to place the order</param>
        /// <returns>Returns you the order uuid</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<OrderPlacedResult> PlaceSellOrderAsync(string apisign, string apikey, string market, double quantity, double rate, System.Threading.CancellationToken cancellationToken);

        /// <summary>Cancel an order</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="uuid">uuid of buy or sell order</param>
        /// <returns>Returns you the order uuid</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderCanceledResult> CancelOrderAsync(string apisign, string apikey, System.Guid uuid);

        /// <summary>Cancel an order</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="uuid">uuid of buy or sell order</param>
        /// <returns>Returns you the order uuid</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<OrderCanceledResult> CancelOrderAsync(string apisign, string apikey, System.Guid uuid, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get open orders</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>Returns you the order uuid</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderListResult> GetOpenOrdersAsync(string apisign, string apikey, string market);

        /// <summary>Get open orders</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>Returns you the order uuid</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<OrderListResult> GetOpenOrdersAsync(string apisign, string apikey, string market, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get Balances.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <returns>balances data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BalanceListResult> GetBalanceListAsync(string apisign, string apikey);

        /// <summary>Get Balances.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <returns>balances data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BalanceListResult> GetBalanceListAsync(string apisign, string apikey, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get Balance.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="currency">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BalanceResult> GetBalanceAsync(string apisign, string apikey, string currency);

        /// <summary>Get Balance.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="currency">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BalanceResult> GetBalanceAsync(string apisign, string apikey, string currency, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get Deposit Address.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="currency">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DepositAddressResult> GetDepositAddressAsync(string apisign, string apikey, string currency);

        /// <summary>Get Deposit Address.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="currency">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<DepositAddressResult> GetDepositAddressAsync(string apisign, string apikey, string currency, System.Threading.CancellationToken cancellationToken);

        /// <summary>withdraw fund.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="currency">a string literal for the market (e.g. BTC-LTC)</param>
        /// <param name="quantity">the amount to purchase</param>
        /// <param name="address">the address where to send the funds</param>
        /// <param name="paymentid">used for CryptoNotes/BitShareX/Nxt/XRP and any other coin that has a memo/message/tag/paymentid option</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DepositAddressResult> WithdrawAsync(string apisign, string apikey, string currency, double quantity, string address, string paymentid);

        /// <summary>withdraw fund.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="currency">a string literal for the market (e.g. BTC-LTC)</param>
        /// <param name="quantity">the amount to purchase</param>
        /// <param name="address">the address where to send the funds</param>
        /// <param name="paymentid">used for CryptoNotes/BitShareX/Nxt/XRP and any other coin that has a memo/message/tag/paymentid option</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<DepositAddressResult> WithdrawAsync(string apisign, string apikey, string currency, double quantity, string address, string paymentid, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get Order By Id.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="uuid">uuid of buy or sell order</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderResult> GetOrderAsync(string apisign, string apikey, System.Guid uuid);

        /// <summary>Get Order By Id.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="uuid">uuid of buy or sell order</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<OrderResult> GetOrderAsync(string apisign, string apikey, System.Guid uuid, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a collection of orders.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderListResult> GetOrderListAsync(string apisign, string apikey, string market);

        /// <summary>Get a collection of orders.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<OrderListResult> GetOrderListAsync(string apisign, string apikey, string market, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a collection of orders.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="currency">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OperationHistoryResult> GetWithdrawListAsync(string apisign, string apikey, string currency);

        /// <summary>Get a collection of orders.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="currency">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<OperationHistoryResult> GetWithdrawListAsync(string apisign, string apikey, string currency, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a collection of orders.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="currency">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OperationHistoryResult> GetDepositListAsync(string apisign, string apikey, string currency);

        /// <summary>Get a collection of orders.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="currency">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<OperationHistoryResult> GetDepositListAsync(string apisign, string apikey, string currency, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.12.0 (NJsonSchema v9.10.50.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class BittrexClient : IBittrexClient
    {
        private string _baseUrl = "https://bittrex.com/api/v1.1";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public BittrexClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>Market Meta Data</summary>
        /// <returns>Markets data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MarketListResult> GetMarketsAsync()
        {
            return GetMarketsAsync(System.Threading.CancellationToken.None);
        }

        /// <summary>Market Meta Data</summary>
        /// <returns>Markets data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<MarketListResult> GetMarketsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/public/getmarkets");

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(MarketListResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<MarketListResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new BittrexClientException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BittrexClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(MarketListResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Currency Meta Data</summary>
        /// <returns>Currencies data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CurrencyListResult> GetCurrenciesAsync()
        {
            return GetCurrenciesAsync(System.Threading.CancellationToken.None);
        }

        /// <summary>Currency Meta Data</summary>
        /// <returns>Currencies data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CurrencyListResult> GetCurrenciesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/public/getcurrencies");

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(CurrencyListResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CurrencyListResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new BittrexClientException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BittrexClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CurrencyListResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get Ticker</summary>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>ticker data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TickerResult> GetTickerAsync(string market)
        {
            return GetTickerAsync(market, System.Threading.CancellationToken.None);
        }

        /// <summary>Get Ticker</summary>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>ticker data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<TickerResult> GetTickerAsync(string market, System.Threading.CancellationToken cancellationToken)
        {
            if (market == null)
                throw new System.ArgumentNullException("market");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/public/getticker?");
            urlBuilder_.Append("market=").Append(System.Uri.EscapeDataString(ConvertToString(market, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(TickerResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<TickerResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new BittrexClientException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BittrexClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(TickerResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get Market Summary</summary>
        /// <returns>market summaries data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MarketSummariesResult> GetMarketSummariesAsync()
        {
            return GetMarketSummariesAsync(System.Threading.CancellationToken.None);
        }

        /// <summary>Get Market Summary</summary>
        /// <returns>market summaries data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<MarketSummariesResult> GetMarketSummariesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/public/getmarketsummaries");

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(MarketSummariesResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<MarketSummariesResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new BittrexClientException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BittrexClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(MarketSummariesResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get Market Summary</summary>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>market summary</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MarketSummaryResult> GetMarketSummaryAsync(string market)
        {
            return GetMarketSummaryAsync(market, System.Threading.CancellationToken.None);
        }

        /// <summary>Get Market Summary</summary>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>market summary</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<MarketSummaryResult> GetMarketSummaryAsync(string market, System.Threading.CancellationToken cancellationToken)
        {
            if (market == null)
                throw new System.ArgumentNullException("market");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/public/getmarketsummary?");
            urlBuilder_.Append("market=").Append(System.Uri.EscapeDataString(ConvertToString(market, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(MarketSummaryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<MarketSummaryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new BittrexClientException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BittrexClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(MarketSummaryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get Order Book</summary>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <param name="type">buy, sell or both to identify the type of orderbook to return</param>
        /// <returns>order book data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OrderBookResult> GetOrderBookAsync(string market, Type? type)
        {
            return GetOrderBookAsync(market, type, System.Threading.CancellationToken.None);
        }

        /// <summary>Get Order Book</summary>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <param name="type">buy, sell or both to identify the type of orderbook to return</param>
        /// <returns>order book data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OrderBookResult> GetOrderBookAsync(string market, Type? type, System.Threading.CancellationToken cancellationToken)
        {
            if (market == null)
                throw new System.ArgumentNullException("market");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/public/getorderbook?");
            urlBuilder_.Append("market=").Append(System.Uri.EscapeDataString(ConvertToString(market, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (type != null) urlBuilder_.Append("type=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(OrderBookResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OrderBookResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new BittrexClientException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BittrexClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(OrderBookResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get Market History</summary>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>order book data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MarketHistoryResult> GetMarketHistoryAsync(string market)
        {
            return GetMarketHistoryAsync(market, System.Threading.CancellationToken.None);
        }

        /// <summary>Get Market History</summary>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>order book data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<MarketHistoryResult> GetMarketHistoryAsync(string market, System.Threading.CancellationToken cancellationToken)
        {
            if (market == null)
                throw new System.ArgumentNullException("market");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/public/getmarkethistory?");
            urlBuilder_.Append("market=").Append(System.Uri.EscapeDataString(ConvertToString(market, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(MarketHistoryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<MarketHistoryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new BittrexClientException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BittrexClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(MarketHistoryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>place a buy order.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <param name="quantity">the amount to purchase</param>
        /// <param name="rate">the rate at which to place the order</param>
        /// <returns>Returns you the order uuid</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OrderPlacedResult> PlaceBuyOrderAsync(string apisign, string apikey, string market, double quantity, double rate)
        {
            return PlaceBuyOrderAsync(apisign, apikey, market, quantity, rate, System.Threading.CancellationToken.None);
        }

        /// <summary>place a buy order.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <param name="quantity">the amount to purchase</param>
        /// <param name="rate">the rate at which to place the order</param>
        /// <returns>Returns you the order uuid</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OrderPlacedResult> PlaceBuyOrderAsync(string apisign, string apikey, string market, double quantity, double rate, System.Threading.CancellationToken cancellationToken)
        {
            if (apikey == null)
                throw new System.ArgumentNullException("apikey");

            if (market == null)
                throw new System.ArgumentNullException("market");

            if (quantity == null)
                throw new System.ArgumentNullException("quantity");

            if (rate == null)
                throw new System.ArgumentNullException("rate");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/market/buylimit?");
            urlBuilder_.Append("apikey=").Append(System.Uri.EscapeDataString(ConvertToString(apikey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("market=").Append(System.Uri.EscapeDataString(ConvertToString(market, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("quantity=").Append(System.Uri.EscapeDataString(ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("rate=").Append(System.Uri.EscapeDataString(ConvertToString(rate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (apisign == null)
                        throw new System.ArgumentNullException("apisign");
                    request_.Headers.TryAddWithoutValidation("apisign", ConvertToString(apisign, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(OrderPlacedResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OrderPlacedResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new BittrexClientException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BittrexClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(OrderPlacedResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>place a sell order.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <param name="quantity">the amount to purchase</param>
        /// <param name="rate">the rate at which to place the order</param>
        /// <returns>Returns you the order uuid</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OrderPlacedResult> PlaceSellOrderAsync(string apisign, string apikey, string market, double quantity, double rate)
        {
            return PlaceSellOrderAsync(apisign, apikey, market, quantity, rate, System.Threading.CancellationToken.None);
        }

        /// <summary>place a sell order.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <param name="quantity">the amount to purchase</param>
        /// <param name="rate">the rate at which to place the order</param>
        /// <returns>Returns you the order uuid</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OrderPlacedResult> PlaceSellOrderAsync(string apisign, string apikey, string market, double quantity, double rate, System.Threading.CancellationToken cancellationToken)
        {
            if (apikey == null)
                throw new System.ArgumentNullException("apikey");

            if (market == null)
                throw new System.ArgumentNullException("market");

            if (quantity == null)
                throw new System.ArgumentNullException("quantity");

            if (rate == null)
                throw new System.ArgumentNullException("rate");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/market/selllimit?");
            urlBuilder_.Append("apikey=").Append(System.Uri.EscapeDataString(ConvertToString(apikey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("market=").Append(System.Uri.EscapeDataString(ConvertToString(market, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("quantity=").Append(System.Uri.EscapeDataString(ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("rate=").Append(System.Uri.EscapeDataString(ConvertToString(rate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (apisign == null)
                        throw new System.ArgumentNullException("apisign");
                    request_.Headers.TryAddWithoutValidation("apisign", ConvertToString(apisign, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(OrderPlacedResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OrderPlacedResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new BittrexClientException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BittrexClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(OrderPlacedResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Cancel an order</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="uuid">uuid of buy or sell order</param>
        /// <returns>Returns you the order uuid</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OrderCanceledResult> CancelOrderAsync(string apisign, string apikey, System.Guid uuid)
        {
            return CancelOrderAsync(apisign, apikey, uuid, System.Threading.CancellationToken.None);
        }

        /// <summary>Cancel an order</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="uuid">uuid of buy or sell order</param>
        /// <returns>Returns you the order uuid</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OrderCanceledResult> CancelOrderAsync(string apisign, string apikey, System.Guid uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (apikey == null)
                throw new System.ArgumentNullException("apikey");

            if (uuid == null)
                throw new System.ArgumentNullException("uuid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/market/cancel?");
            urlBuilder_.Append("apikey=").Append(System.Uri.EscapeDataString(ConvertToString(apikey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("uuid=").Append(System.Uri.EscapeDataString(ConvertToString(uuid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (apisign == null)
                        throw new System.ArgumentNullException("apisign");
                    request_.Headers.TryAddWithoutValidation("apisign", ConvertToString(apisign, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(OrderCanceledResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OrderCanceledResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new BittrexClientException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BittrexClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(OrderCanceledResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get open orders</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>Returns you the order uuid</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OrderListResult> GetOpenOrdersAsync(string apisign, string apikey, string market)
        {
            return GetOpenOrdersAsync(apisign, apikey, market, System.Threading.CancellationToken.None);
        }

        /// <summary>Get open orders</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>Returns you the order uuid</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OrderListResult> GetOpenOrdersAsync(string apisign, string apikey, string market, System.Threading.CancellationToken cancellationToken)
        {
            if (apikey == null)
                throw new System.ArgumentNullException("apikey");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/market/getopenorders?");
            urlBuilder_.Append("apikey=").Append(System.Uri.EscapeDataString(ConvertToString(apikey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (market != null) urlBuilder_.Append("market=").Append(System.Uri.EscapeDataString(ConvertToString(market, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (apisign == null)
                        throw new System.ArgumentNullException("apisign");
                    request_.Headers.TryAddWithoutValidation("apisign", ConvertToString(apisign, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(OrderListResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OrderListResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new BittrexClientException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BittrexClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(OrderListResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get Balances.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <returns>balances data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BalanceListResult> GetBalanceListAsync(string apisign, string apikey)
        {
            return GetBalanceListAsync(apisign, apikey, System.Threading.CancellationToken.None);
        }

        /// <summary>Get Balances.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <returns>balances data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<BalanceListResult> GetBalanceListAsync(string apisign, string apikey, System.Threading.CancellationToken cancellationToken)
        {
            if (apikey == null)
                throw new System.ArgumentNullException("apikey");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/account/getbalances?");
            urlBuilder_.Append("apikey=").Append(System.Uri.EscapeDataString(ConvertToString(apikey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (apisign == null)
                        throw new System.ArgumentNullException("apisign");
                    request_.Headers.TryAddWithoutValidation("apisign", ConvertToString(apisign, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(BalanceListResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BalanceListResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new BittrexClientException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BittrexClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(BalanceListResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get Balance.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="currency">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BalanceResult> GetBalanceAsync(string apisign, string apikey, string currency)
        {
            return GetBalanceAsync(apisign, apikey, currency, System.Threading.CancellationToken.None);
        }

        /// <summary>Get Balance.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="currency">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<BalanceResult> GetBalanceAsync(string apisign, string apikey, string currency, System.Threading.CancellationToken cancellationToken)
        {
            if (apikey == null)
                throw new System.ArgumentNullException("apikey");

            if (currency == null)
                throw new System.ArgumentNullException("currency");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/account/getbalance?");
            urlBuilder_.Append("apikey=").Append(System.Uri.EscapeDataString(ConvertToString(apikey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("currency=").Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (apisign == null)
                        throw new System.ArgumentNullException("apisign");
                    request_.Headers.TryAddWithoutValidation("apisign", ConvertToString(apisign, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(BalanceResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BalanceResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new BittrexClientException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BittrexClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(BalanceResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get Deposit Address.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="currency">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DepositAddressResult> GetDepositAddressAsync(string apisign, string apikey, string currency)
        {
            return GetDepositAddressAsync(apisign, apikey, currency, System.Threading.CancellationToken.None);
        }

        /// <summary>Get Deposit Address.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="currency">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<DepositAddressResult> GetDepositAddressAsync(string apisign, string apikey, string currency, System.Threading.CancellationToken cancellationToken)
        {
            if (apikey == null)
                throw new System.ArgumentNullException("apikey");

            if (currency == null)
                throw new System.ArgumentNullException("currency");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/account/getdepositaddress?");
            urlBuilder_.Append("apikey=").Append(System.Uri.EscapeDataString(ConvertToString(apikey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("currency=").Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (apisign == null)
                        throw new System.ArgumentNullException("apisign");
                    request_.Headers.TryAddWithoutValidation("apisign", ConvertToString(apisign, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(DepositAddressResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<DepositAddressResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new BittrexClientException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BittrexClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(DepositAddressResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>withdraw fund.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="currency">a string literal for the market (e.g. BTC-LTC)</param>
        /// <param name="quantity">the amount to purchase</param>
        /// <param name="address">the address where to send the funds</param>
        /// <param name="paymentid">used for CryptoNotes/BitShareX/Nxt/XRP and any other coin that has a memo/message/tag/paymentid option</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DepositAddressResult> WithdrawAsync(string apisign, string apikey, string currency, double quantity, string address, string paymentid)
        {
            return WithdrawAsync(apisign, apikey, currency, quantity, address, paymentid, System.Threading.CancellationToken.None);
        }

        /// <summary>withdraw fund.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="currency">a string literal for the market (e.g. BTC-LTC)</param>
        /// <param name="quantity">the amount to purchase</param>
        /// <param name="address">the address where to send the funds</param>
        /// <param name="paymentid">used for CryptoNotes/BitShareX/Nxt/XRP and any other coin that has a memo/message/tag/paymentid option</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<DepositAddressResult> WithdrawAsync(string apisign, string apikey, string currency, double quantity, string address, string paymentid, System.Threading.CancellationToken cancellationToken)
        {
            if (apikey == null)
                throw new System.ArgumentNullException("apikey");

            if (currency == null)
                throw new System.ArgumentNullException("currency");

            if (quantity == null)
                throw new System.ArgumentNullException("quantity");

            if (address == null)
                throw new System.ArgumentNullException("address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/account/withdraw?");
            urlBuilder_.Append("apikey=").Append(System.Uri.EscapeDataString(ConvertToString(apikey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("currency=").Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("quantity=").Append(System.Uri.EscapeDataString(ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("address=").Append(System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (paymentid != null) urlBuilder_.Append("paymentid=").Append(System.Uri.EscapeDataString(ConvertToString(paymentid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (apisign == null)
                        throw new System.ArgumentNullException("apisign");
                    request_.Headers.TryAddWithoutValidation("apisign", ConvertToString(apisign, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(DepositAddressResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<DepositAddressResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new BittrexClientException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BittrexClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(DepositAddressResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get Order By Id.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="uuid">uuid of buy or sell order</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OrderResult> GetOrderAsync(string apisign, string apikey, System.Guid uuid)
        {
            return GetOrderAsync(apisign, apikey, uuid, System.Threading.CancellationToken.None);
        }

        /// <summary>Get Order By Id.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="uuid">uuid of buy or sell order</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OrderResult> GetOrderAsync(string apisign, string apikey, System.Guid uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (apikey == null)
                throw new System.ArgumentNullException("apikey");

            if (uuid == null)
                throw new System.ArgumentNullException("uuid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/account/getorder?");
            urlBuilder_.Append("apikey=").Append(System.Uri.EscapeDataString(ConvertToString(apikey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("uuid=").Append(System.Uri.EscapeDataString(ConvertToString(uuid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (apisign == null)
                        throw new System.ArgumentNullException("apisign");
                    request_.Headers.TryAddWithoutValidation("apisign", ConvertToString(apisign, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(OrderResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OrderResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new BittrexClientException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BittrexClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(OrderResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get a collection of orders.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OrderListResult> GetOrderListAsync(string apisign, string apikey, string market)
        {
            return GetOrderListAsync(apisign, apikey, market, System.Threading.CancellationToken.None);
        }

        /// <summary>Get a collection of orders.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="market">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OrderListResult> GetOrderListAsync(string apisign, string apikey, string market, System.Threading.CancellationToken cancellationToken)
        {
            if (apikey == null)
                throw new System.ArgumentNullException("apikey");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/account/getorderhistory?");
            urlBuilder_.Append("apikey=").Append(System.Uri.EscapeDataString(ConvertToString(apikey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (market != null) urlBuilder_.Append("market=").Append(System.Uri.EscapeDataString(ConvertToString(market, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (apisign == null)
                        throw new System.ArgumentNullException("apisign");
                    request_.Headers.TryAddWithoutValidation("apisign", ConvertToString(apisign, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(OrderListResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OrderListResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new BittrexClientException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BittrexClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(OrderListResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get a collection of orders.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="currency">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OperationHistoryResult> GetWithdrawListAsync(string apisign, string apikey, string currency)
        {
            return GetWithdrawListAsync(apisign, apikey, currency, System.Threading.CancellationToken.None);
        }

        /// <summary>Get a collection of orders.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="currency">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OperationHistoryResult> GetWithdrawListAsync(string apisign, string apikey, string currency, System.Threading.CancellationToken cancellationToken)
        {
            if (apikey == null)
                throw new System.ArgumentNullException("apikey");

            if (currency == null)
                throw new System.ArgumentNullException("currency");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/account/getwithdrawalhistory?");
            urlBuilder_.Append("apikey=").Append(System.Uri.EscapeDataString(ConvertToString(apikey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("currency=").Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (apisign == null)
                        throw new System.ArgumentNullException("apisign");
                    request_.Headers.TryAddWithoutValidation("apisign", ConvertToString(apisign, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(OperationHistoryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OperationHistoryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new BittrexClientException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BittrexClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(OperationHistoryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get a collection of orders.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="currency">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OperationHistoryResult> GetDepositListAsync(string apisign, string apikey, string currency)
        {
            return GetDepositListAsync(apisign, apikey, currency, System.Threading.CancellationToken.None);
        }

        /// <summary>Get a collection of orders.</summary>
        /// <param name="apikey">Bittrex Api Key</param>
        /// <param name="currency">a string literal for the market (e.g. BTC-LTC)</param>
        /// <returns>balance data</returns>
        /// <exception cref="BittrexClientException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OperationHistoryResult> GetDepositListAsync(string apisign, string apikey, string currency, System.Threading.CancellationToken cancellationToken)
        {
            if (apikey == null)
                throw new System.ArgumentNullException("apikey");

            if (currency == null)
                throw new System.ArgumentNullException("currency");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/account/getdeposithistory?");
            urlBuilder_.Append("apikey=").Append(System.Uri.EscapeDataString(ConvertToString(apikey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("currency=").Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (apisign == null)
                        throw new System.ArgumentNullException("apisign");
                    request_.Headers.TryAddWithoutValidation("apisign", ConvertToString(apisign, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(OperationHistoryResult);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OperationHistoryResult>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new BittrexClientException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BittrexClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(OperationHistoryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            return System.Convert.ToString(value, cultureInfo);
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Balance
    {
        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("Balance", Required = Newtonsoft.Json.Required.Always)]
        public double Balance1 { get; set; }

        [Newtonsoft.Json.JsonProperty("Available", Required = Newtonsoft.Json.Required.Always)]
        public double Available { get; set; }

        [Newtonsoft.Json.JsonProperty("Pending", Required = Newtonsoft.Json.Required.Always)]
        public double Pending { get; set; }

        [Newtonsoft.Json.JsonProperty("CryptoAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CryptoAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("Requested", Required = Newtonsoft.Json.Required.Always)]
        public bool Requested { get; set; }

        [Newtonsoft.Json.JsonProperty("Uuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uuid { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Balance FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Balance>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BalanceListResult
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Balance> Result { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static BalanceListResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BalanceListResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BalanceResult
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Balance Result { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static BalanceResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BalanceResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CurrencyListResult
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Currency> Result { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CurrencyListResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CurrencyListResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Currency
    {
        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Currency1 { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrencyLong", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CurrencyLong { get; set; }

        [Newtonsoft.Json.JsonProperty("MinConfirmation", Required = Newtonsoft.Json.Required.Always)]
        public int MinConfirmation { get; set; }

        [Newtonsoft.Json.JsonProperty("TxFee", Required = Newtonsoft.Json.Required.Always)]
        public double TxFee { get; set; }

        [Newtonsoft.Json.JsonProperty("IsActive", Required = Newtonsoft.Json.Required.Always)]
        public bool IsActive { get; set; }

        [Newtonsoft.Json.JsonProperty("CoinType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CoinType { get; set; }

        [Newtonsoft.Json.JsonProperty("BaseAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BaseAddress { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Currency FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Currency>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DepositAddress
    {
        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DepositAddress FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DepositAddress>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DepositAddressResult
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DepositAddress> Result { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DepositAddressResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DepositAddressResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Market
    {
        [Newtonsoft.Json.JsonProperty("MarketCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string MarketCurrency { get; set; }

        [Newtonsoft.Json.JsonProperty("BaseCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BaseCurrency { get; set; }

        [Newtonsoft.Json.JsonProperty("MarketCurrencyLong", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string MarketCurrencyLong { get; set; }

        [Newtonsoft.Json.JsonProperty("BaseCurrencyLong", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BaseCurrencyLong { get; set; }

        [Newtonsoft.Json.JsonProperty("MinTradeSize", Required = Newtonsoft.Json.Required.Always)]
        public double MinTradeSize { get; set; }

        [Newtonsoft.Json.JsonProperty("MarketName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string MarketName { get; set; }

        [Newtonsoft.Json.JsonProperty("IsActive", Required = Newtonsoft.Json.Required.Always)]
        public bool IsActive { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Created { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Market FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Market>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MarketHistoryResult
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Trade> Result { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static MarketHistoryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MarketHistoryResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MarketListResult
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Market> Result { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static MarketListResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MarketListResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MarketSummariesResult
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<MarketSummary> Result { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static MarketSummariesResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MarketSummariesResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MarketSummary
    {
        [Newtonsoft.Json.JsonProperty("MarketName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string MarketName { get; set; }

        [Newtonsoft.Json.JsonProperty("High", Required = Newtonsoft.Json.Required.Always)]
        public double High { get; set; }

        [Newtonsoft.Json.JsonProperty("Low", Required = Newtonsoft.Json.Required.Always)]
        public double Low { get; set; }

        [Newtonsoft.Json.JsonProperty("Volume", Required = Newtonsoft.Json.Required.Always)]
        public double Volume { get; set; }

        [Newtonsoft.Json.JsonProperty("Last", Required = Newtonsoft.Json.Required.Always)]
        public double Last { get; set; }

        [Newtonsoft.Json.JsonProperty("BaseVolume", Required = Newtonsoft.Json.Required.Always)]
        public double BaseVolume { get; set; }

        [Newtonsoft.Json.JsonProperty("TimeStamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime TimeStamp { get; set; }

        [Newtonsoft.Json.JsonProperty("Bid", Required = Newtonsoft.Json.Required.Always)]
        public double Bid { get; set; }

        [Newtonsoft.Json.JsonProperty("Ask", Required = Newtonsoft.Json.Required.Always)]
        public double Ask { get; set; }

        [Newtonsoft.Json.JsonProperty("OpenBuyOrders", Required = Newtonsoft.Json.Required.Always)]
        public int OpenBuyOrders { get; set; }

        [Newtonsoft.Json.JsonProperty("OpenSellOrders", Required = Newtonsoft.Json.Required.Always)]
        public int OpenSellOrders { get; set; }

        [Newtonsoft.Json.JsonProperty("PrevDay", Required = Newtonsoft.Json.Required.Always)]
        public double PrevDay { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Created { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayMarketName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayMarketName { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static MarketSummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MarketSummary>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MarketSummaryResult
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<MarketSummary> Result { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static MarketSummaryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MarketSummaryResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Order
    {
        [Newtonsoft.Json.JsonProperty("Uuid", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("OrderUuid", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid OrderUuid { get; set; }

        [Newtonsoft.Json.JsonProperty("Exchange", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Exchange { get; set; }

        [Newtonsoft.Json.JsonProperty("OrderType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OrderType { get; set; }

        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Always)]
        public double Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("QuantityRemaining", Required = Newtonsoft.Json.Required.Always)]
        public double QuantityRemaining { get; set; }

        [Newtonsoft.Json.JsonProperty("Limit", Required = Newtonsoft.Json.Required.Always)]
        public double Limit { get; set; }

        [Newtonsoft.Json.JsonProperty("CommissionPaid", Required = Newtonsoft.Json.Required.Always)]
        public double CommissionPaid { get; set; }

        [Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.Always)]
        public double Price { get; set; }

        [Newtonsoft.Json.JsonProperty("PricePerUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PricePerUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("Opened", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Opened { get; set; }

        [Newtonsoft.Json.JsonProperty("Closed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Closed { get; set; }

        [Newtonsoft.Json.JsonProperty("CancelInitiated", Required = Newtonsoft.Json.Required.Always)]
        public bool CancelInitiated { get; set; }

        [Newtonsoft.Json.JsonProperty("ImmediateOrCancel", Required = Newtonsoft.Json.Required.Always)]
        public bool ImmediateOrCancel { get; set; }

        [Newtonsoft.Json.JsonProperty("IsConditional", Required = Newtonsoft.Json.Required.Always)]
        public bool IsConditional { get; set; }

        [Newtonsoft.Json.JsonProperty("Condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Condition { get; set; }

        [Newtonsoft.Json.JsonProperty("ConditionTarget", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConditionTarget { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Order FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Order>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrderBook
    {
        [Newtonsoft.Json.JsonProperty("buy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<OrderSummary> Buy { get; set; }

        [Newtonsoft.Json.JsonProperty("sell", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<OrderSummary> Sell { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OrderBook FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderBook>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrderBookResult
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderBook Result { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OrderBookResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderBookResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrderCanceledResult
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OrderCanceledResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderCanceledResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrderListResult
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Order> Result { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OrderListResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderListResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrderPlacedResult
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderPlaced Result { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OrderPlacedResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderPlacedResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrderPlaced
    {
        /// <summary>order unique identifier</summary>
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Uuid { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OrderPlaced FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderPlaced>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrderResult
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Order Result { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OrderResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrderSummary
    {
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Always)]
        public double Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Always)]
        public double Rate { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OrderSummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderSummary>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Ticker
    {
        [Newtonsoft.Json.JsonProperty("Bid", Required = Newtonsoft.Json.Required.Always)]
        public double Bid { get; set; }

        [Newtonsoft.Json.JsonProperty("Ask", Required = Newtonsoft.Json.Required.Always)]
        public double Ask { get; set; }

        [Newtonsoft.Json.JsonProperty("Last", Required = Newtonsoft.Json.Required.Always)]
        public double Last { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Ticker FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Ticker>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TickerResult
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ticker Result { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TickerResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TickerResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Trade
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("TimeStamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime TimeStamp { get; set; }

        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Always)]
        public double Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.Always)]
        public double Price { get; set; }

        [Newtonsoft.Json.JsonProperty("Total", Required = Newtonsoft.Json.Required.Always)]
        public double Total { get; set; }

        [Newtonsoft.Json.JsonProperty("FillType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TradeFillType FillType { get; set; }

        [Newtonsoft.Json.JsonProperty("OrderType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TradeOrderType OrderType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Trade FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Trade>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Operation
    {
        [Newtonsoft.Json.JsonProperty("PaymentUuid", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid PaymentUuid { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Address { get; set; }

        [Newtonsoft.Json.JsonProperty("Opened", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Opened { get; set; }

        [Newtonsoft.Json.JsonProperty("Authorized", Required = Newtonsoft.Json.Required.Always)]
        public bool Authorized { get; set; }

        [Newtonsoft.Json.JsonProperty("PendingPayment", Required = Newtonsoft.Json.Required.Always)]
        public bool PendingPayment { get; set; }

        [Newtonsoft.Json.JsonProperty("TxCost", Required = Newtonsoft.Json.Required.Always)]
        public double TxCost { get; set; }

        [Newtonsoft.Json.JsonProperty("TxId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TxId { get; set; }

        [Newtonsoft.Json.JsonProperty("Canceled", Required = Newtonsoft.Json.Required.Always)]
        public bool Canceled { get; set; }

        [Newtonsoft.Json.JsonProperty("InvalidAddress", Required = Newtonsoft.Json.Required.Always)]
        public bool InvalidAddress { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Operation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Operation>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OperationHistoryResult
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Operation> Result { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OperationHistoryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OperationHistoryResult>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Type
    {
        [System.Runtime.Serialization.EnumMember(Value = "buy")]
        Buy = 0,

        [System.Runtime.Serialization.EnumMember(Value = "sell")]
        Sell = 1,

        [System.Runtime.Serialization.EnumMember(Value = "both")]
        Both = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TradeFillType
    {
        [System.Runtime.Serialization.EnumMember(Value = "FILL")]
        FILL = 0,

        [System.Runtime.Serialization.EnumMember(Value = "PARTIAL_FILL")]
        PARTIAL_FILL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TradeOrderType
    {
        [System.Runtime.Serialization.EnumMember(Value = "BUY")]
        BUY = 0,

        [System.Runtime.Serialization.EnumMember(Value = "SELL")]
        SELL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.12.0 (NJsonSchema v9.10.50.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class BittrexClientException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public BittrexClientException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.12.0 (NJsonSchema v9.10.50.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class BittrexClientException<TResult> : BittrexClientException
    {
        public TResult Result { get; private set; }

        public BittrexClientException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}